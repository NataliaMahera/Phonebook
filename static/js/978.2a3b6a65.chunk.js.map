{"version":3,"file":"static/js/978.2a3b6a65.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/icons/src/Unlock.tsx","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage.jsx","../node_modules/@chakra-ui/icons/src/ViewOff.tsx","../node_modules/@chakra-ui/icons/src/AtSign.tsx","../node_modules/@chakra-ui/icons/src/ArrowRight.tsx","../node_modules/@chakra-ui/icons/src/Email.tsx","../node_modules/@chakra-ui/icons/src/Lock.tsx","../node_modules/@chakra-ui/icons/src/View.tsx","../node_modules/@chakra-ui/toast/src/use-toast.tsx"],"sourcesContent":["import { createIcon } from \"@chakra-ui/icon\"\n\nexport const UnlockIcon = createIcon({\n  d: \"M19.5,9.5h-.75V6.75A6.751,6.751,0,0,0,5.533,4.811a1.25,1.25,0,1,0,2.395.717A4.251,4.251,0,0,1,16.25,6.75V9a.5.5,0,0,1-.5.5H4.5a2,2,0,0,0-2,2V22a2,2,0,0,0,2,2h15a2,2,0,0,0,2-2V11.5A2,2,0,0,0,19.5,9.5Zm-9.5,6a2,2,0,1,1,3,1.723V19.5a1,1,0,0,1-2,0V17.223A1.994,1.994,0,0,1,10,15.5Z\",\n  displayName: \"UnlockIcon\",\n})\n","import { useDispatch } from 'react-redux';\nimport { registerThunk } from 'redux/auth/authOperations';\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  Text,\n  Link,\n  useToast,\n  InputGroup,\n  InputLeftAddon,\n  InputRightAddon,\n  Icon,\n} from '@chakra-ui/react';\nimport {\n  ArrowRightIcon,\n  AtSignIcon,\n  EmailIcon,\n  InfoOutlineIcon,\n  LockIcon,\n  ViewOffIcon,\n  ViewIcon,\n  UnlockIcon,\n} from '@chakra-ui/icons';\nimport { Link as NavLink } from 'react-router-dom';\nimport { Formik, Form } from 'formik';\nimport { useState } from 'react';\n\nconst RegisterForm = () => {\n  const [type, setType] = useState('password');\n  const [icon, setIcon] = useState(ViewOffIcon);\n\n  const handleToggle = () => {\n    if (type === 'password') {\n      setIcon(ViewIcon, UnlockIcon);\n      setType('text');\n    } else {\n      setIcon(ViewOffIcon, LockIcon);\n      setType('password');\n    }\n  };\n\n  const dispatch = useDispatch();\n  const toast = useToast();\n\n  const onRegisterSubmit = e => {\n    e.preventDefault();\n\n    const form = e.target;\n    const name = form.elements.userName.value;\n    const email = form.elements.userEmail.value;\n    const password = form.elements.userPassword.value;\n\n    const formData = {\n      name,\n      email,\n      password,\n    };\n\n    dispatch(registerThunk(formData))\n      .unwrap()\n      .then(() =>\n        toast({\n          title: 'Submitted!',\n          status: 'success',\n          duration: 3000,\n          isClosable: true,\n        })\n      )\n      .catch(() =>\n        toast({\n          title: 'Incorrect email or password. Please try again.',\n          status: 'error',\n          duration: 3000,\n          isClosable: true,\n        })\n      );\n\n    form.reset();\n  };\n\n  return (\n    <Formik>\n      <Form onSubmit={onRegisterSubmit}>\n        <Box\n          w={[300, 400, 500]}\n          m=\"auto\"\n          mt={20}\n          mb={20}\n          p={5}\n          bg=\"gray.50\"\n          borderRadius=\"lg\"\n          boxShadow=\"dark-lg\"\n        >\n          <FormControl isRequired color=\"teal.800\" marginBottom={'12px'}>\n            <Text\n              textAlign=\"center\"\n              fontSize={{ base: '22px', md: '24px', lg: '32px' }}\n              mb={2}\n              bgGradient=\"linear(to-l, #7928CA, #FF0080)\"\n              bgClip=\"text\"\n              fontWeight=\"bold\"\n            >\n              Sign Up\n            </Text>\n            <Text fontSize={14} mb={6} textAlign={'center'}>\n              Please fill with the data all required fields and create your\n              account.\n            </Text>\n            <FormLabel color=\"black\" fontSize={'15px'}>\n              Full name\n            </FormLabel>\n            <InputGroup mt={1}>\n              <InputLeftAddon>\n                <AtSignIcon\n                  w={4}\n                  h={4}\n                  bgGradient=\"linear(to-r, green.200, pink.500)\"\n                  borderRadius={2}\n                  color=\"black\"\n                />\n              </InputLeftAddon>\n              <Input\n                variant=\"outline\"\n                placeholder=\"Enter full name\"\n                type=\"text\"\n                name=\"userName\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                autoComplete=\"off\"\n                required\n              />\n            </InputGroup>\n          </FormControl>\n          <FormControl isRequired color=\"black\" marginBottom={'12px'}>\n            <FormLabel color=\"black\" fontSize={'15px'}>\n              Email\n            </FormLabel>\n            <InputGroup mt={1}>\n              <InputLeftAddon>\n                <EmailIcon\n                  w={4}\n                  h={4}\n                  bgGradient=\"linear(to-r, green.200, pink.500)\"\n                  borderRadius={2}\n                />\n              </InputLeftAddon>\n              <Input\n                variant=\"outline\"\n                type=\"email\"\n                name=\"userEmail\"\n                required\n                placeholder=\"Enter email\"\n                autoComplete=\"off\"\n              />\n            </InputGroup>\n          </FormControl>\n          <FormControl isRequired color=\"black\" marginBottom={'12px'}>\n            <FormLabel color=\"black\" fontSize={'15px'}>\n              Password\n            </FormLabel>\n            <InputGroup mt={1}>\n              <InputLeftAddon>\n                <LockIcon\n                  w={4}\n                  h={4}\n                  color=\"black\"\n                  bgGradient=\"linear(to-r, green.200, pink.500)\"\n                  borderRadius={2}\n                />\n              </InputLeftAddon>\n              <Input\n                variant=\"outline\"\n                type={type}\n                name=\"userPassword\"\n                placeholder=\"Enter password\"\n                required\n                autoComplete=\"off\"\n              />\n\n              <InputRightAddon>\n                <Icon\n                  w={4}\n                  h={4}\n                  color=\"black\"\n                  onClick={handleToggle}\n                  as={icon}\n                />\n              </InputRightAddon>\n            </InputGroup>\n          </FormControl>\n          <Button\n            type=\"submit\"\n            w=\"100%\"\n            mt={4}\n            color=\"gray.800\"\n            bg=\"gray.200\"\n            leftIcon={<ArrowRightIcon w={3} h={3} mr={'3px'} />}\n            _hover={{\n              bgGradient:\n                'linear(225deg, #FF3CAC 0%, #784BA0 50%, #2B86C5 100%)',\n              transitionDuration: '0.3s',\n              transform: 'translateY(-5px)',\n              transitionTimingFunction: 'ease-in-out',\n            }}\n          >\n            Sign Up\n          </Button>\n          <Box textAlign=\"center\" mt=\"5\" mb={3}>\n            <Link\n              as={NavLink}\n              to=\"/login\"\n              color=\"gray.500\"\n              m=\"auto\"\n              display={'flex'}\n              justifyContent={'center'}\n              alignItems={'center'}\n            >\n              <InfoOutlineIcon w={4} h={4} mr={'8px'} stroke=\"black\" />\n              Already have an acount? Log in..\n            </Link>\n          </Box>\n        </Box>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from 'components/RegisterForm/RegisterForm';\nimport React from 'react';\n\nconst RegisterPage = () => {\n  return <RegisterForm />;\n};\n\nexport default RegisterPage;\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const ViewOffIcon = createIcon({\n  displayName: \"ViewOffIcon\",\n  path: (\n    <g fill=\"currentColor\">\n      <path d=\"M23.2,10.549a20.954,20.954,0,0,0-4.3-3.6l4-3.995a1,1,0,1,0-1.414-1.414l-.018.018a.737.737,0,0,1-.173.291l-19.5,19.5c-.008.007-.018.009-.026.017a1,1,0,0,0,1.631,1.088l4.146-4.146a11.26,11.26,0,0,0,4.31.939h.3c4.256,0,8.489-2.984,11.051-5.8A2.171,2.171,0,0,0,23.2,10.549ZM16.313,13.27a4.581,4.581,0,0,1-3,3.028,4.3,4.3,0,0,1-3.1-.19.253.253,0,0,1-.068-.407l5.56-5.559a.252.252,0,0,1,.407.067A4.3,4.3,0,0,1,16.313,13.27Z\" />\n      <path d=\"M7.615,13.4a.244.244,0,0,0,.061-.24A4.315,4.315,0,0,1,7.5,12,4.5,4.5,0,0,1,12,7.5a4.276,4.276,0,0,1,1.16.173.244.244,0,0,0,.24-.062l1.941-1.942a.254.254,0,0,0-.1-.421A10.413,10.413,0,0,0,12,4.75C7.7,4.692,3.4,7.7.813,10.549a2.15,2.15,0,0,0-.007,2.9,21.209,21.209,0,0,0,3.438,3.03.256.256,0,0,0,.326-.029Z\" />\n    </g>\n  ),\n})\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const AtSignIcon = createIcon({\n  displayName: \"AtSignIcon\",\n  d: \"M12,.5A11.634,11.634,0,0,0,.262,12,11.634,11.634,0,0,0,12,23.5a11.836,11.836,0,0,0,6.624-2,1.25,1.25,0,1,0-1.393-2.076A9.34,9.34,0,0,1,12,21a9.132,9.132,0,0,1-9.238-9A9.132,9.132,0,0,1,12,3a9.132,9.132,0,0,1,9.238,9v.891a1.943,1.943,0,0,1-3.884,0V12A5.355,5.355,0,1,0,12,17.261a5.376,5.376,0,0,0,3.861-1.634,4.438,4.438,0,0,0,7.877-2.736V12A11.634,11.634,0,0,0,12,.5Zm0,14.261A2.763,2.763,0,1,1,14.854,12,2.812,2.812,0,0,1,12,14.761Z\",\n})\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const ArrowRightIcon = createIcon({\n  displayName: \"ArrowRightIcon\",\n  path: (\n    <g fill=\"currentColor\">\n      <path d=\"M13.584,12a2.643,2.643,0,0,1-.775,1.875L3.268,23.416a1.768,1.768,0,0,1-2.5-2.5l8.739-8.739a.25.25,0,0,0,0-.354L.768,3.084a1.768,1.768,0,0,1,2.5-2.5l9.541,9.541A2.643,2.643,0,0,1,13.584,12Z\" />\n      <path d=\"M23.75,12a2.643,2.643,0,0,1-.775,1.875l-9.541,9.541a1.768,1.768,0,0,1-2.5-2.5l8.739-8.739a.25.25,0,0,0,0-.354L10.934,3.084a1.768,1.768,0,0,1,2.5-2.5l9.541,9.541A2.643,2.643,0,0,1,23.75,12Z\" />\n    </g>\n  ),\n})\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const EmailIcon = createIcon({\n  displayName: \"EmailIcon\",\n  path: (\n    <g fill=\"currentColor\">\n      <path d=\"M11.114,14.556a1.252,1.252,0,0,0,1.768,0L22.568,4.87a.5.5,0,0,0-.281-.849A1.966,1.966,0,0,0,22,4H2a1.966,1.966,0,0,0-.289.021.5.5,0,0,0-.281.849Z\" />\n      <path d=\"M23.888,5.832a.182.182,0,0,0-.2.039l-6.2,6.2a.251.251,0,0,0,0,.354l5.043,5.043a.75.75,0,1,1-1.06,1.061l-5.043-5.043a.25.25,0,0,0-.354,0l-2.129,2.129a2.75,2.75,0,0,1-3.888,0L7.926,13.488a.251.251,0,0,0-.354,0L2.529,18.531a.75.75,0,0,1-1.06-1.061l5.043-5.043a.251.251,0,0,0,0-.354l-6.2-6.2a.18.18,0,0,0-.2-.039A.182.182,0,0,0,0,6V18a2,2,0,0,0,2,2H22a2,2,0,0,0,2-2V6A.181.181,0,0,0,23.888,5.832Z\" />\n    </g>\n  ),\n})\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const LockIcon = createIcon({\n  d: \"M19.5,9.5h-.75V6.75a6.75,6.75,0,0,0-13.5,0V9.5H4.5a2,2,0,0,0-2,2V22a2,2,0,0,0,2,2h15a2,2,0,0,0,2-2V11.5A2,2,0,0,0,19.5,9.5Zm-9.5,6a2,2,0,1,1,3,1.723V19.5a1,1,0,0,1-2,0V17.223A1.994,1.994,0,0,1,10,15.5ZM7.75,6.75a4.25,4.25,0,0,1,8.5,0V9a.5.5,0,0,1-.5.5H8.25a.5.5,0,0,1-.5-.5Z\",\n  displayName: \"LockIcon\",\n})\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const ViewIcon = createIcon({\n  displayName: \"ViewIcon\",\n  path: (\n    <g fill=\"currentColor\">\n      <path d=\"M23.432,10.524C20.787,7.614,16.4,4.538,12,4.6,7.6,4.537,3.213,7.615.568,10.524a2.211,2.211,0,0,0,0,2.948C3.182,16.351,7.507,19.4,11.839,19.4h.308c4.347,0,8.671-3.049,11.288-5.929A2.21,2.21,0,0,0,23.432,10.524ZM7.4,12A4.6,4.6,0,1,1,12,16.6,4.6,4.6,0,0,1,7.4,12Z\" />\n      <circle cx=\"12\" cy=\"12\" r=\"2\" />\n    </g>\n  ),\n})\n","import type { AlertStatus } from \"@chakra-ui/alert\"\nimport { StyleProps, ThemingProps, useChakra } from \"@chakra-ui/system\"\nimport type { RenderProps, ToastId, ToastOptions } from \"./toast.types\"\nimport { createToastFn, CreateToastFnReturn } from \"./toast\"\nimport { ToastPosition } from \"./toast.placement\"\nimport { useMemo } from \"react\"\nimport { useToastOptionContext } from \"./toast.provider\"\n\nexport interface UseToastOptions extends ThemingProps<\"Alert\"> {\n  /**\n   * The placement of the toast\n   *\n   * @default \"bottom\"\n   */\n  position?: ToastPosition\n  /**\n   * The delay before the toast hides (in milliseconds)\n   * If set to `null`, toast will never dismiss.\n   *\n   * @default 5000 ( = 5000ms )\n   */\n  duration?: ToastOptions[\"duration\"]\n  /**\n   * Render a component toast component.\n   * Any component passed will receive 2 props: `id` and `onClose`.\n   */\n  render?(props: RenderProps): React.ReactNode\n  /**\n   * The title of the toast\n   */\n  title?: React.ReactNode\n  /**\n   * The description of the toast\n   */\n  description?: React.ReactNode\n  /**\n   * If `true`, toast will show a close button\n   * @default false\n   */\n  isClosable?: boolean\n  /**\n   * The status of the toast.\n   */\n  status?: AlertStatus\n  /**\n   * A custom icon that will be displayed by the toast.\n   */\n  icon?: React.ReactNode\n  /**\n   * The `id` of the toast.\n   *\n   * Mostly used when you need to prevent duplicate.\n   * By default, we generate a unique `id` for each toast\n   */\n  id?: ToastId\n  /**\n   * Callback function to run side effects after the toast has closed.\n   */\n  onCloseComplete?: () => void\n  /**\n   * Optional style overrides for the container wrapping the toast component.\n   */\n  containerStyle?: StyleProps\n}\n\n/**\n * React hook used to create a function that can be used\n * to show toasts in an application.\n */\nexport function useToast(options?: UseToastOptions): CreateToastFnReturn {\n  const { theme } = useChakra()\n  const defaultOptions = useToastOptionContext()\n\n  return useMemo(\n    () =>\n      createToastFn(theme.direction, {\n        ...defaultOptions,\n        ...options,\n      }),\n    [options, theme.direction, defaultOptions],\n  )\n}\n\nexport default useToast\n"],"names":["UnlockIcon","createIcon","d","displayName","_useState","useState","_useState2","_slicedToArray","type","setType","_useState3","ViewOffIcon","_useState4","icon","setIcon","dispatch","useDispatch","toast","useToast","_jsx","Formik","children","Form","onSubmit","e","preventDefault","form","target","formData","name","elements","userName","value","email","userEmail","password","userPassword","registerThunk","unwrap","then","title","status","duration","isClosable","catch","reset","_jsxs","Box","w","m","mt","mb","p","bg","borderRadius","boxShadow","FormControl","isRequired","color","marginBottom","Text","textAlign","fontSize","base","md","lg","bgGradient","bgClip","fontWeight","FormLabel","InputGroup","InputLeftAddon","AtSignIcon","h","Input","variant","placeholder","pattern","autoComplete","required","EmailIcon","LockIcon","InputRightAddon","Icon","onClick","ViewIcon","as","Button","leftIcon","ArrowRightIcon","mr","_hover","transitionDuration","transform","transitionTimingFunction","Link","NavLink","to","display","justifyContent","alignItems","InfoOutlineIcon","stroke","RegisterForm","path","fill","cx","cy","r","options","theme","useChakra","defaultOptions","useToastOptionContext","useMemo","createToastFn","direction"],"sourceRoot":""}